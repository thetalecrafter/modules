{"name":"Modules","tagline":"CommonJS module framework for use in web applications","body":"# modules\r\n\r\n> Use CommonJS modules client-side in web applications\r\n\r\n## Getting started\r\n\r\nInstall via npm\r\n\r\n\tnpm install modules --save-dev\r\n\r\nAdd the middleware to your express or connect app\r\n\r\n\tapp.get('/module/*', require('modules').middleware({\r\n\t\troot: './component', // where modules live in the filesystem\r\n\t\tpath: '/module/' // the base path for modules in the browser\r\n\t\t// ... other options\r\n\t});\r\n\r\nAdd the client script to your html\r\n\r\n\r\n\t<script src=\"/module/define.min.js\" data-main=\"my-main-module\"></script>\r\n\r\n\r\n\r\n### Mapping and Bundling\r\n\r\nYou can create bundles (files containing multiple modules), and/or map modules to\r\nurls outside of the conventional location.\r\n\r\nClient-side, this mapping is handled with the `data-uris` attribute on the script\r\ntag, or with a call to `define.uri()`. `define.uri()` takes a map object as its only\r\nparameter, and the `data-uris` attribute expects a JSON array of map objects.\r\n\r\nMap objects are of the form:\r\n\r\n\t{ \"uri\":\"url/of/bundle.js\", \"ids\":[ \"module1\", \"my/module/2\" ] }\r\n\r\n\r\nServer-side and at build time you can generate bundles with the following snippets:\r\n\r\n\t// Generate a bundle with a specific set of modules included\r\n\trequire('modules').modules(\r\n\t\t[ 'module1', 'module2' ],\r\n\t\t{ /* options */ }, // specify optional compression, etc.\r\n\t\tfunction(err, js, modified) {\r\n\t\t\t// js is a string containing the AMD-wrapped javascript for the modules\r\n\t\t\t// modified is the most recent modified date among the included modules\r\n\t\t}\r\n\t);\r\n\r\n\t// Generate a bundle with all of the deep dependencies of the modules, excluding\r\n\t//  the deep dependencies of another list of modules\r\n\trequire('modules/lib/bundles').bundle(\r\n\t\t[ 'module1', 'module2' ], // include these and their deep dependencies\r\n\t\t[ 'module3', 'module4' ], // except any of these or their deep dependencies\r\n\t\t{ /* options */ },\r\n\t\tfunction(err, js, modified) {\r\n\t\t}\r\n\t);\r\n\r\n\r\n\r\n\r\n## API\r\n\r\n### In Browser\r\n\r\n#### define.js or define.min.js\r\n\r\nThese scripts create the `define` function used to create a module environment\r\nin the browser. You can reference the file how ever you'd like; they are in the\r\n`lib` folder in the source code. However, the preferred way is to include a\r\nscript tag pointing to the path the middleware is listening to:\r\n\r\n\t<script src=\"/path/to/middleware/define.min.js\"></script>\r\n\r\n* `define(id, dependencies?, factory)` -- Define module `id`. `id` is required\r\n\tin this implementation. If the `dependencies` parameter is omitted, the factory\r\n\twill not be scanned for `require()` calls, `[ 'require', 'exports', 'module' ]`\r\n\twill be used instead.\r\n\tSee the [AMD wiki](https://github.com/amdjs/amdjs-api/wiki/AMD) for details.\r\n* `define.amd` -- Object denoting AMD compatibility.\r\n* `define.uri(uriMap)` -- Tell define what file to load for specific modules.\r\n\t`uriMap` objects look like `{ \"uri\":\"url/of/bundle.js\", \"ids\":[ \"moduleid\" ] }`.\r\n\r\n\r\n#### define.shim.js\r\n\r\nThis is only useful to include first in a bundle that may be loaded before the\r\n`define` or `define.min` script has run. Usually the main bundle includes\r\n`define.min` and the shim is not needed.\r\n\r\n* `define(id, dependencies?, factory)` -- Saves the arguments for when `define`\r\n\tor `define.min` is loaded.\r\n* `define.amd` -- Object denoting AMD compatibility.\r\n\r\n\r\n#### module scope\r\n\r\n(inside the factory function)\r\n\r\nSee the [CommonJS Module spec](http://wiki.commonjs.org/wiki/Modules/1.1.1),\r\nthe [AMD spec](https://github.com/amdjs/amdjs-api/wiki/AMD), and\r\n[Node.js modules](http://nodejs.org/api/modules.html)\r\n\r\n* `exports` -- Alias for `module.exports`. An object to assign properties to\r\n\tin order to export values.\r\n* `module` -- An object representing this module.\r\n* `module.children` -- An array of `module` objects for the modules this one\r\n\trequires synchronously.\r\n* `module.exports` -- This object will be returned from `require()` calls for\r\n\tthis module. Assign to this to export the value. Note if you assign to this\r\n\tproperty, the `exports` variable is not automatically updated.\r\n* `module.filename` -- Alias of `uri`. The url of the script containing this\r\n\tmodule.\r\n* `module.loaded` -- True if the module has already been defined.\r\n* `module.parent` -- The `module` object for the module that first required\r\n\tthis module.\r\n* `module.id` -- A string of slash separated terms identifying the module.\r\n* `module.require()` -- A `require()` function that always resolves relative\r\n\tids against this module's id.\r\n* `module.uri` -- Alias of `filename`. The url of the script containing this\r\n\tmodule.\r\n* `require(id)` -- Returns the `exports` for the module identified. Throws an\r\n\terror if the module has not been loaded. `id` is a module id string.\r\n* `require(ids, next)` -- Asynchronously load the modules, require them, and\r\n\tpass them as arguments to the callback function `next`. `ids` may be a\r\n\tsingle id string, or an array of module id strings.\r\n* `require.cache` -- A store of all modules the system knows about. You may\r\n\tundefine a module by `delete require.cache[module.id]`. Assigning to\r\n\tthis property will have no effect.\r\n* `require.main` -- The `module` object of the module loaded by the `data-main`\r\n\tattribute of the define script.\r\n* `require.resolve(id)` -- Resolves a relative module id against this module's\r\n\tid, and returns the `uri` for that module.\r\n* `require.toUrl(id)` -- Similar to `require.resolve()`. See the AMD spec.\r\n\r\n\r\n\r\n### In Node.js\r\n\r\n#### modules\r\n\r\n\tmodules = require('modules')\r\n\r\nProvides middleware and functions to wrap and bundle your modules for use in the\r\nbrowser.\r\n\r\n* `modules.dependencies(id, js, options?)` -- Finds all literal synchronous\r\n\t`require()` calls in a module identified by `id`. `js` is the code for the\r\n\tmodule as a string. If `options.absolute` is true, the returned dependency ids\r\n\tare made absolute, otherwise they are returned as written in the code. Returns\r\n\tan array of module id strings. *Note: this uses regular expressions instead\r\n\tof a parser. Comments are excluded. The function will miss any calls with a\r\n\trenamed require, or a variable instead of a string literal id.*\r\n* `modules.middleware(options?)` -- Returns an express / connect middleware using\r\n\tthe `options` passed in.\r\n\r\n\t* `compress` -- Defaults to `false`. If a function is specified, it will be\r\n\t\tpassed a module object with `id`, `filename`, `code`, and `modified`\r\n\t\tproperties as the first parameter, and a function as the second. It expects\r\n\t\tthe function to be called with either an error or null in the first argument,\r\n\t\tand the compressed code as a string in the second. Example:\r\n\r\n\t\t\tcompress:function(js, next) {\r\n\t\t\t\tvar UglifyJS = require('uglify-js');\r\n\t\t\t\tjs = UglifyJS.minify(js.code, { fromString:true });\r\n\t\t\t\tnext(null, js);\r\n\t\t\t}\r\n\r\n\t* `forbid` Defaults to `[]`. If the file path to a module matches an entry\r\n\t\tin this list, a `'Forbidden'` error will be passed to the next error\r\n\t\tmiddleware. Entries can be a string module id (filename starts with\r\n\t\tentry), a regular expression (`exp.test(filename)`) or any object with\r\n\t\ta `test` function property (`obj.test(filename)`). Files outside of the\r\n\t\t`root` directory are always forbidden, unless they have been mapped.\r\n\t\tMapped files are always allowed. Example:\r\n\r\n\t\t\tforbid: [\r\n\t\t\t\t'server', /\\.middleware\\.js$/,\r\n\t\t\t\t{ test:function(filename) {\r\n\t\t\t\t\treturn filename.slice(-3) === 'foo';\r\n\t\t\t\t} }\r\n\t\t\t]\r\n\r\n\t* `encoding` Defaults to `'utf8'`. Encoding to read module files in.\r\n\t* `map` Defaults to `{}`. Map module ids to files in the filesystem.\r\n\t\t`define`, `define.min`, and `define.shim` will be mapped to their\r\n\t\tlocations in `lib` unless explicitly mapped elsewhere. Relative paths\r\n\t\tare resolved against `root`. Values can also be functions Example:\r\n\r\n\t\t\tmap: {\r\n\t\t\t\tjquery: './vendor/jquery.min.js',\r\n\t\t\t\tsession: function(id, options) {\r\n\t\t\t\t\t// figure out or generate the file for this user\r\n\t\t\t\t\treturn sessionFilename;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t* `maxAge` -- Defaults to `0`. Seconds the browser should cache the module code.\r\n\t\tIf set, will be put in a `Cache-Control: public, max-age=` HTTP header.\r\n\t* `nowrap` Defaults to `[ 'uris.json', /\\.amd\\.js$/i ]`. If a module id\r\n\t\tmatches an entry in this list, it is not wrapped with a `define()`\r\n\t\tcall. Entries can be a string module id (`entry === id`), a regular\r\n\t\texpression (`exp.test(id)`) or any object with a `test` function\r\n\t\tproperty (`obj.test(id)`).\r\n\t* `path` -- Defaults to `'/module/'`. Base url path for modules in the browser.\r\n\t* `root` -- Defaults to `process.cwd()`. Base path for modules in the filesystem.\r\n\t* `translate` Defaults to `{}`. Translate specific files into CommonJS\r\n\t\tmodules. Object keys may be filenames, module ids, or file extensions.\r\n\t\tThe functions are passed a module object, with `id`, `filename`, and\r\n\t\t`content` properties. Example:\r\n\r\n\t\t\ttranslate: {\r\n\t\t\t\thtml: function(module, options, next) {\r\n\t\t\t\t\tvar id = module.id, // String\r\n\t\t\t\t\t\tfilename = module.filename, // String\r\n\t\t\t\t\t\tcontent = module.content, // Buffer\r\n\t\t\t\t\t\t_ = require('underscore');\r\n\t\t\t\t\tcontent = content.toString('utf8');\r\n\t\t\t\t\tnext(null, 'exports.template = ' + _.template(content).source);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\tIf they do not match any keys in this option, modules are converted from\r\n\t\t`Buffer` to string with `options.encoding`.\r\n* `modules.module(id, options?, next)` -- Generate the client-side code for\r\n\tthe module. `id` is a module id string. `options` are the same as for\r\n\t`modules.middleware()`. `next(err, result)` will be called when\r\n\tdone. `err` is any error that may have occured, or `null` otherwise.\r\n\t`result` is an object with properties `code`, which is the browser javascript\r\n\tas a string, and `modified`, which is a `Date` of the last modified time on\r\n\tthe source file.\r\n* `modules.modules(ids, options?, next)` -- Exactly like `modules.module` only\r\n\t`ids` is an array of module id strings, all of which are included in the\r\n\tresulting `result.code`. The `result.modified` is the most recent modified\r\n\ttime among all of the source files loaded.\r\n\r\n\r\n#### bundles\r\n\r\n\tbundles = require('modules/lib/bundles')\r\n\r\nProvides functions for bundling modules with their deep dependencies.\r\n\r\n* `bundles.bundle(ids, exclude, options?, next)` -- Generate a bundle including\r\n\tthe browser code for all of the modules in the `ids` array and their deep\r\n\tdependencies, except `exclude` and all of their deep dependencies.\r\n\t`ids` and `exclude` are arrays of module id strings. `options` are the\r\n\tsame as `modules.middleware()`. `next` is called when complete, with the\r\n\tsame arguments as `next` in `modules.module()`.\r\n* `bundles.dependencies(ids, options?, next)` -- Gets a list of `ids` and all\r\n\tof their deep dependencies. Modules need to be loaded in order to determine\r\n\ttheir dependencies, so `modules.module()` is called inside this method,\r\n\twith the `options` passed in. `next(err, ids)` is called when complete,\r\n\twith `ids` as an array of absolute module id strings.\r\n* `bundles.expand(ids, exclude, options?, next)` -- Gets a list just like\r\n\t`bundles.dependencies()`, only the ids in `exclude` and their deep\r\n\tdependencies are omitted from the list.\r\n\r\n\r\n\r\n## Client-Side Features\r\n\r\n * CommonJS Modules 1.1.1 implementation for in-browser use\r\n * `module.require` function similar to Node.js implementation\r\n * `require(id, callback)` for async a la require.js\r\n * Map module ids to arbirary uris\r\n\r\n\r\n\r\n\r\n## Server-Side Features\r\n\r\n * Middleware for express / connect\r\n * Create bundles of all the deep dependencies of a list of modules\r\n * Configure minification using your favorite compressor\r\n\r\n\r\n\r\n\r\n## Browser Support\r\n\r\n* IE 6+, Chrome, Firefox, Safari, Opera\r\n* IE Mobile, Chrome Mobile, Firefox Mobile, Safari Mobile, Opera Mobile\r\n\r\nBasically, bugs reported in any common browser will get fixed.\r\n\r\n### Caveats\r\n\r\nIE before 8 requires you give the client script tag an id of \"modules-define\".\r\nAll newer browsers will look for `script[data-main]` to find the\r\n`data-main`, `data-path`, and `data-uris` attribute settings.\r\n\r\n`data-uris` requires `JSON.parse`, which can be polyfilled in older browsers.\r\n\r\n\r\n\r\n## Who and Why\r\n\r\n**modules** was written by Andy VanWagoner\r\n([thetalecrafter](http://github.com/thetalecrafter)).\r\n\r\nSome of the motivation for this project can be found in\r\n[this article](http://thetalecrafter.com/2011/09/22/commonjs-in-the-browser/).\r\n\r\n* If you like writing your modules in AMD, use\r\n\t[require.js](http://requirejs.org).\r\n* If you want the browser environment to be just like Node.js, use\r\n\t[browserify](http://browserify.org/).\r\n* If you want simple CommonJS in the browser, then **modules** is for you.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}